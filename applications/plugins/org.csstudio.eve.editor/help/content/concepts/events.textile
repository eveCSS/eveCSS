h1(eveTopic). Events

p. Events are a way to affect a scan, e.g. by pausing it if a condition is met. Three types (describing their source) of events exist:

* *SCHEDULE*: a schedule event is triggered when a scan module is finished.
* *DETECTOR*: a detector event is triggered when a detector is ready.
* *MONITOR*: a monitor event sends @true@ or @false@ whether a condition is met.

p. The effect (or outcome) of an event is defined by the location the event is added to. Events could be added to a _chain_, a _scan module_ or a _detector channel_ in their respective "views":../gettingstarted.html. Each view has one or more tabs, one for each outcome:

table(eveDataTable).
|_.View|_.Pause|_.Redo|_.Break|_.Stop|_.Trigger|
|<. Chain |+|+|+|+| |
|<. Scan Module |+|+|+| |+|
|<. Detector Channel | | | | |+|

p. Monitor conditions are evaluated at the start of a chain/scan module.

h2. Outcomes

p. The effect an event has depends on its outcome which is one of _pause_, _redo_, _break_, _stop_, _trigger_. 

h3. Pause Event

p. The scan has a state which is either _running_ or _pause_. A detector or schedule event (trigger events) can manipulate that state by its action attribute as follows:

table(eveDataTable).
|_.Row|_.Scan State (current)|_.Event Action|_. Scan State (result)|
|1| _running_| _ON_| _pause_|*
|2| _running_| _OFF_| _running_|
|3| _pause_| _ON_| _pause_|
|4| _pause_| _OFF_| _running_|*

p. +Note+: Scenarios shown in row two and three have no effect at all since the scan state does not change.

p. Since monitor events do not just trigger when they occur but signal whether a specified condition is met there are more possible scenarios:

table(eveDataTable).
|_.Row|_.Scan State (current)|_.Event Action|_. condition|_. Scan State (result)|
|1| _running_| _ON_| _true_| _pause_|*
|2| _running_| _ON_| _false_| _running_|
|3| _running_| _OFF_| _true_| _running_|
|4| _running_| _OFF_| _false_| _running_|
|5| _running_| _ONOFF_| _true_| _pause_|*
|6| _running_| _ONOFF_| _false_| _running_|
|7| _pause_| _ON_| _true_| _pause_|
|8| _pause_| _ON_| _false_| _pause_|
|9| _pause_| _OFF_| _true_| _running_|*
|10| _pause_| _OFF_| _false_| _pause_|
|11| _pause_| _ONOFF_| _true_| _running_|*
|12| _pause_| _ONOFF_| _false_| _pause_|

p. If the specified condition is not met nothing happens at all (even rows). Rows three and seven just overwrites the state with the same value. The behavior in rows one and nine is equal to the behavior of detector and schedule events. Rows five and eleven show the behavior specific to monitor events due to the additional _ONOFF_ action.

p. +Note+: Each event can continue the scan (stop the pause) regardless of which event paused it. "Read more":#combine on combining events.

h3. Redo Event

If caused by trigger events (detector or schedule) the detector is read again or the scan module is executed again respectively. Monitor events behave the same way (redo if condition is @true@) except that they will pause the scan before reading/executing again until the event sends @false@.

h3. Break/Stop/Trigger Event

Caused by a trigger event (detector or schedule) and monitor event sending @true@.

h2(#combine). Combining _Chain_ and _ScanModule_ Events

p. Chains and scan modules have _independent_ pause states, i.e. both scan module and chain states must be _running_ in order to continue a scan.

p. When monitor events are combined (one in the chain, one in the scan module) a redo occurs if at least one of their last send values was @true@. Only when both last sent @false@ the scan continues normally.