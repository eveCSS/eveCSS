h1(eveTopic). Motor Axis

p. Motors are devices where you can read from (determine its position/temperature) or write to (e.g. move its axis or alter its temperature in case of a radiator). They contain at least one axis.

p. A motor axis usually has different modes (called step functions) it can be controlled with:

table(eveDataTable).
|_. Step Function |_. Number |_. Date |_. absolute |_. relative |
| __Add__ | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_yes.gif! |
| __Multiply__ | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_no.gif! | !(eveImage)../../img/misc/signed_no.gif! | !(eveImage)../../img/misc/signed_yes.gif! |
| __File/Positionlist__ | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_no.gif! | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_yes.gif! |

h2(eveTopic). Add (Number)

p. In the __Add__ mode the motor axis is controlled by a given quadruple (__start__, __stop__, __stepwidth__, __stepcount__). The fourth value, which ist marked, is calculated out of the other three (rounded up to next Integer):

p=. __stop__ - __start__ = __stepwidth__ ==&middot;== __stepcount__

p. After moving to its __start__ position it will drive to __stepcount__ equally spaced positions, defined by __stepwidth__ until reaching the __stop__ position. Each position is calculated as follows:

p=. !(eveImage)../../img/concepts/MotorAxis-StepFunctions-Add-Absolute.png(Add Absolute)!

p. The above mode treats each value as __absolute__. If they are treated __relative__ the next position is calculated relative to the current motor position __mPos__:

p=. !(eveImage)../../img/concepts/MotorAxis-StepFunctions-Add-Relative.png(Add Relative)!

h3(eveTopic). Example 1

p. Given: __Start__=1, __Stop__=10, __Stepwidth__=1 (absolute) ==&rArr;== __Stepcount__ = 9

p. Motor positions: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

h3(eveTopic). Example 2

p. Given: __Start__=1, __Stop__=10, __Stepwidth__=2 (absolute) ==&rArr;== __Stepcount__ = 5

p. Motor positions: (1, 3, 5, 7, 9, 10)

p. __Note:__ The last position (__Stop__) is always actuated (disregarding the possible shorter stepwidth).

h3(eveTopic). Example 3

p. Given: __Start__=1, __Stop__=10, __Stepwidth__=1, __mPos__=5 (relative) ==&rArr;== __Stepcount__ = 9

p. Motor positions: (6, 7, 8, 9, 10, 11, 12, 13, 14, 15)

h2(eveTopic). Add (msec Timer)

p. There's a specific (pseudo-)motor called "msec Timer" allowing to define time points imitating motor positions. The __Position Mode__ has the following effects:

absolute: By starting of this scan Modul, the Timer is setting to Null.
relative: The Timer is setting to Null by loading the scan description into the engine.

h2(eveTopic). Add (date Timer)

p. There's a specific (pseudo-)motor called "date Timer" allowing to define a time span with discrete points imitating motor positions.

h2(eveTopic). Multiply

p. The __Multiply__ mode is also controlled by a given quadruple (__start__, __stop__, __stepwidth__, __stepcount__) but it differs in the way positions are calculated. The motor positions result by taking the sequence generated by the quadruple as multiplication factors of the initial motor position.
Since its calculation is based on the current motor position the __Multiply__ mode is always __relative__.

h3(eveTopic). Example 1

p. Given: __Start__=1, __Stop__=5, __Stepwidth__=1, __mPos__=2 (relative) ==&rArr;== __Stepcount__ = 4

p. Motor positions: (2 ==&middot;== 1, 2 ==&middot;== 2, 2 ==&middot;== 3, 2 ==&middot;== 4, 2 ==&middot;== 5) = (2, 4, 6, 8, 10)

h3(eveTopic). Example 2

p. Given: __Start__=1, __Stop__=10, __Stepwidth__=2, __mPos__=2 (relative) ==&rArr;== __Stepcount__ = 5

p. Motor positions: (2 ==&middot;== 1, 2 ==&middot;== 3, 2 ==&middot;== 5, 2 ==&middot;== 7, 2 ==&middot;== 9, 2 ==&middot;== 10) = (2, 6, 10, 14, 18, 20)

h2(eveTopic). File/Positionlist

p. The __File__ and __Positionlist__ mode behaves like the __Add (Number)__ mode except that the motor positions are taken from the given file/list instead of calculated by a quadruple. This enables the option to use positions that are not equidistant.

h3(eveTopic). Example 1

p. Given: a list of values "1, 3, 7, 4, 17" (absolute)

p. Motor positions: (1, 3, 7, 4, 17)

h3(eveTopic). Example 2

p. Given: a list of values "3, 1, -7, 35, 14" (relative), __mPos__=3

p. Motor positions: (6, 7, 0, 35, 49)

h2(eveTopic). Plugin

p. In the __Plugin__ mode the motor axis is controlled by a plug in which have random number of options.

table(eveDataTable).
|_. Plug-In |_. absolute |_. relative |_. Option |
| __MotionDisabled__ | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_no.gif! |  |
| __ReferenceAdd__ | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_no.gif! | summand, referenceaxis |
| __ReferenceMultiply__ | !(eveImage)../../img/misc/signed_yes.gif! | !(eveImage)../../img/misc/signed_no.gif! | factor, referenceaxis |


h3(eveTopic). MotionDisabled

p. If this plugin is set, only the position of this axis will be read without positioning

h3(eveTopic). ReferenceAdd

p. If this plugin is set, the positions of the axis, are the positions of the reference axis with adding a summand.

h4(eveTopic). Example 1

p. Given: 
Axis 1: __summand__=4.8, __referenceaxis__=Axis2, (absolute) 
Axis 2: __Start__=1, __Stop__=5, __Stepwidth__=1 (absolute) ==&rArr;== __Stepcount__ = 9

p. Motor positions:
Axis 1: (1, 2, 3, 4, 5)
Axis 2: (5.8, 6.8, 7.8, 8.8, 9.8)

h3(eveTopic). ReferenceMultiply

p. If this plugin is set, the positions of the axis, are the position of the reference axis multiplied by a factor.

h4(eveTopic). Example 1

p. Given: 
Axis 1: __factor__=1.5, __referenceaxis__=Axis2, (absolute) 
Axis 2: __Start__=1, __Stop__=5, __Stepwidth__=1 (absolute) ==&rArr;== __Stepcount__ = 9

p. Motor positions:
Axis 1: (1, 2, 3, 4, 5)
Axis 2: (1.5, 3, 4.5, 6, 7.5)
